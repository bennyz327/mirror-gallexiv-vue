# 能動的，但是怪怪的
# image: node:16.5.0
# stages:
#   # - install
#   # - build
#   - deploy
# pages:
#   stage: deploy
#   cache:
#     key:
#       files:
#         - package-lock.json
#       prefix: npm
#     paths:
#       - node_modules/
#   script:
#     - npm install
#     - npm run build
#     - cp -a dist/. public/

#     - ls .
#     - ls /

#     # - npm run dev
#     - docker build -t app/vue .
#     - docker run -d -p 8080:8080 --rm --name vuetest app/vue
#   artifacts:
#     paths:
#       - public
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
################

stages:
#  - install
  - test
#  - build
#  - push
#  - deploy

### INSTALL ###
#install_dependencies:
#  image: node:gallium-alpine3.16
#  stage: install
#  only:
#    - master
#  script:
#    - yarn install
#  artifacts:
#    paths:
#      - node_modules/
#    expire_in: 30 mins

### TEST ###
run_dev_tests:
  stage: test
#  needs:
#    - install_dependencies
#  dependencies:
#    - install_dependencies
  script:
    # - yarn test
    - echo "Running some tests"
  artifacts:
    paths:
      - junit.xml
      - node_modules/
    reports:
      junit: junit.xml
    expire_in: 30 mins

### BUILD ###
#run_build:
#  image: node:gallium-alpine3.16
#  stage: build
#  # needs:
#  #   - run_unit_tests
#  # dependencies:
#  #   - run_unit_tests
#  # only:
#  #   - develop
#  #   - /^v.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)(?:0|[a-z]*)$/
#  script:
#    - cp ${nginx} default.conf
#    - >
#      if [ $CI_COMMIT_BRANCH == "develop" ]; then
#        echo 'Use develop .env'
#        cp ${ENV_DEV} .env
#      else
#        echo 'Use master .env'
#        cp ${ENV_PROD} .env
#      fi
#    - yarn build
#  artifacts:
#    paths:
#      - .env
#      - dist/
#      - default.conf
#      - docker-compose.yml
#      - Dockerfile
#    expire_in: 1 day
#run_build:
#  stage: build
#  needs:
#    - run_dev_tests
#  script:
#    - docker build -t gallexiv-vue
#  only:
#    - master

  ### DEPLOY TO DEVELOP ###
#run_deploy_dev:
#  image: docker/compose:latest
#  stage: deploy
#  needs:
#    - run_build
#  dependencies:
#    - run_build
#  variables:
#    GIT_STRATEGY: none
#  only:
#    - devXX
  # tags:
    # - develop
#  script:
#    - docker-compose down
#    - docker-compose up -d --build

# 可試試用imgae: docker執行D中有D
# image: docker
# services:
#   - docker:dind
# stages:
#   - deploy
# step-deploy-prod:
#   stage: deploy
#   script:
#     - docker build -t app/vue-demo .
#     - docker run -d -p 80:80 --rm --name todoapp app/vue-demo

### DEPLOY TO PRODUCTION ###
#run_deploy_prod:
#  image: docker/compose:latest
#  stage: deploy
#  needs:
#    - run_build
#  dependencies:
#    - run_build
#  variables:
#    GIT_STRATEGY: none
#  only:
#    - masterXX
#     # - /^v.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)(?:0|[a-z]*)$/
#  except:
#    - branches
#  script:
#    - docker-compose down
#    - docker-compose up -d --build
